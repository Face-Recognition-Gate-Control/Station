// var isStepsComplete = function() {
//   var allCompleted = true;
//   $(".step").each( function() {
//       if (!($(this).hasClass("completed"))) {
//         allCompleted = false;
//         return false;
//       }
//     });
//     return allCompleted;
// };

// setInterval(function() {
//   var mainPath = "/static/images/gate_status.jpg";
//   var thumbPath = "/static/images/scott_thumb.png";
//   var allGood = isStepsComplete();
//   if (allGood) {
//     setMainDisplay(mainPath);
//     setThumbnailDisplay(thumbPath);
//   }
//   else{
//     //
//   }
// }, 750);


// var setMainDisplay = function(imPath="") {
//   var defaultSrc = "/static/images/test.png";
//     // var defaultSrc = "{{ url_for('frame_streamer') }}"
//   if (imPath == "") {
//     document.getElementById('main_display').src  = defaultSrc;
//   } else {
//     document.getElementById('main_display').src  = imPath;
//   }
// };

// var setThumbnailDisplay = function(imPath="") {
//   var defaultSrc = "/static/images/thumbnail.png";
//   if (imPath == "") {
//     document.getElementById('thumbnail').src  = defaultSrc;
//   } else {
//     document.getElementById('thumbnail').src  = imPath;
//   }
// };

// var resetSystem = function() {
//   disableStep(1);
//   disableStep(2);
//   disableStep(3);
//   setMainDisplay();
//   setThumbnailDisplay();
//   console.log("Person entered through the Gate.");
// };

// var disableStep = function(stepID) {
//   var step = document.getElementById("step" + stepID);
//   if(step.classList.contains("completed")) {
//     step.classList.remove("completed");
//   }
// };

// var enableStep = function(stepID) {
//   var step = document.getElementById("step" + stepID);
//   if (!(step.classList.contains("completed"))) {
//     step.classList.add("completed");
//   }
// };

// var S_INIT = 0;
// var S_SCANNING = 1;
// var S_SCANNING = 1;
// var S_SCANNING = 1;
// var S_SCANNING = 1;
// var currente_state = S_INIT;

// const STATES = {
//     INIT: "init",
//     SCANNING: "scanning",
//     VALIDATING: "validating",
//     ACCESS: "access",
//     RESET: "reset",
// };



  // switch(system_state) {

  //   case STATES.INIT:
  //       enableStep(1)
  //       break;

  //   case STATES.SCANNING:
  //       enableStep(1)
  //       break;

  //   case STATES.VALIDATING:
  //       enableStep(2)
  //       break;

  //   case STATES.ACCESS:
  //       enableStep(3)
         // START SYSTEM TIMER FOR 10 seconds?
  //       break;

  //   case STATES.RESET:
  //       resetSystem();
  //       break;

  //   default:
       //BLABLA
  //   }
  //s.send(input.value)



  {# <img id="main_display" class="ui main image centered" src="/static/images/test.png"> #}



  # class ControllState:
#     def __init__(self):
#         self._is_scanned = False
#         self._is_validated = False
#         self._is_accessed = False
#         self._states = {
#             "is_scanned": self._is_scanned,
#             "is_validated": self._is_validated,
#             "is_accessed": self._is_accessed
#         }

#     def __call__(self, state):
#         if state in self._states:
#             return True
#         return False
    
#     def get(self):
#         return self._states


# state = ControllState()

# class CurrentUserInfo(BaseModel):
#     session_id: Optional[str] = None # "RANDOM ID" // Generated on each "authorization" - used on the server for caching authorizations
#     embedding: Optional[bytes] = None # Tensor !!
#     access_granted: Optional[bool] = None
#     registration_url: Optional[str] = None # URL
#     user_thumbnail: Optional[bytes] = None # User Avatar Image




def this_will_be_the_camera_loop():

    # TODO: TEST STUFF
    # TODO: Model types of (BaseModel) for type checking and validation
    # TODO: Implement before img i captured
    # TODO: Check face_box gr8ter then min_required_size
    # TOOD: listen to system state for next muvsss
    G_HEIGHT, G_WIDTH = (180, 120)  # GOOD (valid)
    B_HEIGHT, B_WIDTH = (100, 70)   # BAD  (non valid)
    SHOW_FACE_BOX = True
    face_embedder = None
    face_detector = None
    VALIDATE_FACE = True
    TIMER_EXPIRED = 1 # Seconds
    #TODO Smart loop-timer (0.5 seconds)

    counter = Counter(1)
    # Below stuff wont work, so chill
    while True:

        frame = cam.get_frame()
        face_boxes = face_detector.predict_faces(frame)

        for face_box in face_boxes:
            if VALIDATE_FACE:
                if VideoCamera.valid_size(face_box):
                    counter.start()
                    if counter.is_expired():
                        face = cam.get_roi(face_box)
                        cv2.imwrite("./tmp/face.jpg", face)
                        embedding = face_embedder.frame_to_embedding(face)
                        disp_que.add_response({
                            "response_name": "user_authorization",
                            "embedding": embedding
                        })
                        start_confirmation_timer_from_server()
                else:
                    counter.stop()

            if SHOW_FACE_BOX:
                frame = VideoCamera.draw_rectangle(frame, face_box)

       #yield (b"--frame\r\nContent-Type:image/jpeg\r\n\r\n" + frame + b"\r\n")


"""


