from facenet_pytorch import InceptionResnetV1
import torch
import numpy as np
import torch
import cv2
import os

# TODO: import utils, and pre-process image
# TODO: import local weigths into Embedd-model (be careful inside ML-modules)


class FaceEmbedder():
    """
    This class represents a pretrained
    machine learning model used to generate feature embeddings for faces
    """

    def __init__(self):
        """ Instanciates the model with a special neural network structure,
            and sets up the foundation for the hidden layers.
        """
        self.torch_device = self._create_and_get_device()
        self.face_embedder = self._create_and_get_model()

    def _create_and_get_model(self):
        """Creates the basic structure type of what kind of database the
        model is trained upon. Model-types correspondes to a certain type
        of configuration inside the models structure.

        Returns:
            nn.Module: returns neural network with emphasized features
            towards feature embeddings
        """
        # TODO: move to somewhere else ??
        model_types = ["vggface2", "CASIA-Webface"]
        model = InceptionResnetV1(pretrained="vggface2")

        activate_prediction_mode = True
        transfer_tensors_to_device = True

        if activate_prediction_mode:
            model.eval()
        if transfer_tensors_to_device:
            model.to(self.torch_device)
        return model

    def frame_to_embedding(self, face_crop):
        """receives a frame consisting of the given persons face,
        and returns a spesific type of embedding
        generated by the face features of the person

        Args:
            face_crop ([numpy.ndarray]): [the input frame]

        Returns:
            [Tensor]: [the generated face embedding]
        """
        # TODO: weird face_crops can cause AttributeError, figure this out
        face_crop = cv2.cvtColor(face_crop, cv2.COLOR_BGR2RGB)
        face_crop = cv2.resize(face_crop, (160, 160),
                               interpolation=cv2.INTER_CUBIC)
        face_crop = np.rollaxis(face_crop, 2, 0)
        face_crop_tensor = torch.FloatTensor(face_crop)
        face_crop_tensor = FaceEmbedder._fixed_image_standardization(
            face_crop_tensor)
        face_crop_tensor = face_crop_tensor.unsqueeze(0).to(self.torch_device)
        embedding = self.face_embedder(face_crop_tensor).detach().cpu()
        return embedding

    @staticmethod
    def _create_and_get_device():
        """validates the computers/systems capabilities,
        and loads the device on which a torch.Tensor is or will be allocated.

        Returns:
            [str]: [the name of allocated device]
        """
        if torch.cuda.is_available():
            return torch.device('cuda:0')
        return (torch.device('cpu')).type

    @staticmethod
    def _fixed_image_standardization(image_tensor):
        """Linearly scales image to have zero mean and unit norm.

        Args:
            image_tensor ([Tensor]): [input tensor]

        Returns:
            [Tensor]: [scaled Tensor]
        """
        processed_tensor = (image_tensor - 127.5) / 128.0
        return processed_tensor


if __name__ == "__main__":
    pass
